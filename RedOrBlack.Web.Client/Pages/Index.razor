@page "/"
@inherits ReactiveInjectableComponentBase<HomeViewModel>
@inject IJSRuntime JSRun
<PageTitle>Roulette!</PageTitle>
@if(ViewModel != null)
{
    <AlertView Alert="ViewModel.Alert" />
    <p><b>Wallet: </b>@ViewModel.AccountNumber</p>
    @if(ViewModel.IsLoading)
    {
        <p>Loading...</p>
    }
    else
    {
        @if (ViewModel.IsDeployed)
        {
            <TelerikButton OnClick="ViewModel.Load.BindCommand<MouseEventArgs>()">Reload</TelerikButton>
            @if(ViewModel.IsOpenForWithdrawl)
            {
                <TelerikButton OnClick="ViewModel.OpenBets.BindCommand<MouseEventArgs>()">Open Bets</TelerikButton>
            }
            else
            {
                <TelerikButton OnClick="ViewModel.Spin.BindCommand<MouseEventArgs>()">Spin</TelerikButton>
            }
            
            <p><b>Contract Address:</b> @ViewModel.ContractAddress</p>
            @if (!ViewModel.IsOwner)
            {
                <AccountView ViewModel="ViewModel.CurrentAccount" />
            }
            else
            {
                <OwnerView ViewModel="ViewModel.OwnerVM"/>
            }
            <WheelView ViewModel="ViewModel.WheelVM"/>
            @ViewModel.TimeToSpin.ToLocalTime().ToShortTimeString()
        }
        else
        {
            <TelerikButton OnClick="ViewModel.Deploy.BindCommand<MouseEventArgs>()">Deploy</TelerikButton>
        }
    }
}
@code{
    protected SemaphoreSlim Slim { get; } = new SemaphoreSlim(0);
    protected string? SignedData { get; set; }
    protected override Task OnInitializedAsync()
    {
        ViewModel.SignatureRequest.RegisterHandler(async data =>
        {
            await JSRun.InvokeVoidAsync("signTransaction", 
                ViewModel.AccountNumber, 
                data.Input.ContractAddress, 
                data.Input.TXData,
                data.Input.Value.ToString(),
                data.Input.Gas.ToString(),
                nameof(CallMemberRequestFin));
            await Slim.WaitAsync();
            data.SetOutput(SignedData ?? throw new InvalidDataException());
            SignedData = null;
        });

        return base.OnInitializedAsync();
    }
    [JSInvokable("SetAccount")]
    public async Task SetAccount(string accountNumber)
    {
        ViewModel.AccountNumber = accountNumber;
    }
    [JSInvokable("CallMemberRequestFin")]
    public Task CallMemberRequestFin(string signedData)
    {
        SignedData = signedData;
        Slim.Release();
        return Task.CompletedTask;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            var dotNetReference = DotNetObjectReference.Create(this);
            await JSRun.InvokeVoidAsync("SetDotNetObject", dotNetReference);
        }
    }
}
